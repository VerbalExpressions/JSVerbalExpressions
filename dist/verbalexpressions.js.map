{"version":3,"sources":["../VerbalExpressions.js"],"names":["VerbalExpression","_prefixes","_source","_suffixes","_modifiers","value","pattern","compile","enable","add","sanitize","then","anyOf","i","length","from","to","lineBreak","modifier","includes","replace","addModifier","removeModifier","isInteger","quantity","values","filter","test","argument","join","lower","upper","undefined","slice","source","toString","components","match","flags","RegExp","toEscape","lastMatch","VerEx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;IAQMA,gB;;;AACF,gCAAc;AAAA;;AAIV;AAJU,wIAEJ,EAFI,EAEA,IAFA;AACV;;;AAIA,cAAKC,SAAL,GAAiB,EAAjB;AACA,cAAKC,OAAL,GAAe,EAAf;AACA,cAAKC,SAAL,GAAiB,EAAjB;AACA,cAAKC,UAAL,GAAkB,IAAlB,CARU,CAQc;AARd;AASb;;AAED;;;;8BAsBgB;AAAA,gBAAZC,KAAY,uEAAJ,EAAI;;AACZ,iBAAKH,OAAL,IAAgBG,KAAhB;AACA,gBAAMC,UAAU,KAAKL,SAAL,GAAiB,KAAKC,OAAtB,GAAgC,KAAKC,SAArD;;AAEA,iBAAKI,OAAL,CAAaD,OAAb,EAAsB,KAAKF,UAA3B;;AAEA,mBAAO,IAAP;AACH;;AAED;;;;sCAE2B;AAAA,gBAAfI,MAAe,uEAAN,IAAM;;AACvB,iBAAKP,SAAL,GAAiBO,SAAS,GAAT,GAAe,EAAhC;AACA,mBAAO,KAAKC,GAAL,EAAP;AACH;;;oCAEwB;AAAA,gBAAfD,MAAe,uEAAN,IAAM;;AACrB,iBAAKL,SAAL,GAAiBK,SAAS,GAAT,GAAe,EAAhC;AACA,mBAAO,KAAKC,GAAL,EAAP;AACH;;;6BAEIJ,K,EAAO;AACRA,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,mBAAO,KAAKI,GAAL,SAAeJ,KAAf,OAAP;AACH;;;6BAEIA,K,EAAO;AACR,mBAAO,KAAKM,IAAL,CAAUN,KAAV,CAAP;AACH;;;8BAEKA,K,EAAO;AACTA,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,mBAAO,KAAKI,GAAL,SAAeJ,KAAf,QAAP;AACH;;;2BAEEA,K,EAAO;AACN,iBAAKJ,SAAL,IAAkB,KAAlB;AACA,iBAAKE,SAAL,SAAqB,KAAKA,SAA1B;;AAEA,iBAAKM,GAAL,CAAS,OAAT;;AAEA,gBAAIJ,KAAJ,EAAW;AACP,qBAAKM,IAAL,CAAUN,KAAV;AACH;;AAED,mBAAO,IAAP;AACH;;;mCAEU;AACP,mBAAO,KAAKI,GAAL,CAAS,QAAT,CAAP;AACH;;;oCAEWJ,K,EAAO;AACfA,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,mBAAO,KAAKI,GAAL,WAAiBJ,KAAjB,SAAP;AACH;;;oCAEW;AACR,mBAAO,KAAKI,GAAL,CAAS,QAAT,CAAP;AACH;;;qCAEYJ,K,EAAO;AAChBA,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,mBAAO,KAAKI,GAAL,WAAiBJ,KAAjB,SAAP;AACH;;;8BAEKA,K,EAAO;AACTA,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,mBAAO,KAAKI,GAAL,OAAaJ,KAAb,OAAP;AACH;;;4BAEGA,K,EAAO;AACP,mBAAO,KAAKO,KAAL,CAAWP,KAAX,CAAP;AACH;;;gCAEgB;AACb,gBAAIA,QAAQ,EAAZ;;AAEA,iBAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAI,UAAOC,MAA3B,EAAmCD,KAAK,CAAxC,EAA2C;AACvC,oBAAME,OAAOf,iBAAiBU,QAAjB,qBAAiCG,IAAI,CAArC,yBAAiCA,IAAI,CAArC,EAAb;AACA,oBAAMG,KAAKhB,iBAAiBU,QAAjB,qBAAiCG,CAAjC,yBAAiCA,CAAjC,EAAX;;AAEAR,yBAAYU,IAAZ,SAAoBC,EAApB;AACH;;AAED,mBAAO,KAAKP,GAAL,OAAaJ,KAAb,OAAP;AACH;;AAED;;;;oCAEY;AACR,mBAAO,KAAKI,GAAL,CAAS,oBAAT,CAAP,CADQ,CAC+B;AAC1C;;;6BAEI;AACD,mBAAO,KAAKQ,SAAL,EAAP;AACH;;;8BAEK;AACF,mBAAO,KAAKR,GAAL,CAAS,KAAT,CAAP;AACH;;;+BAEM;AACH,mBAAO,KAAKA,GAAL,CAAS,MAAT,CAAP;AACH;;;gCAEO;AACJ,mBAAO,KAAKA,GAAL,CAAS,KAAT,CAAP;AACH;;;qCAEY;AACT,mBAAO,KAAKA,GAAL,CAAS,KAAT,CAAP;AACH;;AAED;;;;oCAEYS,Q,EAAU;AAClB,gBAAI,CAAC,KAAKd,UAAL,CAAgBe,QAAhB,CAAyBD,QAAzB,CAAL,EAAyC;AACrC,qBAAKd,UAAL,IAAmBc,QAAnB;AACH;;AAED,mBAAO,KAAKT,GAAL,EAAP;AACH;;;uCAEcS,Q,EAAU;AACrB,iBAAKd,UAAL,GAAkB,KAAKA,UAAL,CAAgBgB,OAAhB,CAAwBF,QAAxB,EAAkC,EAAlC,CAAlB;AACA,mBAAO,KAAKT,GAAL,EAAP;AACH;;;sCAE0B;AAAA,gBAAfD,MAAe,uEAAN,IAAM;;AACvB,mBAAOA,SAAS,KAAKa,WAAL,CAAiB,GAAjB,CAAT,GAAiC,KAAKC,cAAL,CAAoB,GAApB,CAAxC;AACH;;;sCAE0B;AAAA,gBAAfd,MAAe,uEAAN,IAAM;;AACvB,mBAAOA,SAAS,KAAKc,cAAL,CAAoB,GAApB,CAAT,GAAoC,KAAKD,WAAL,CAAiB,GAAjB,CAA3C;AACH;;;wCAE4B;AAAA,gBAAfb,MAAe,uEAAN,IAAM;;AACzB,mBAAOA,SAAS,KAAKc,cAAL,CAAoB,GAApB,CAAT,GAAoC,KAAKD,WAAL,CAAiB,GAAjB,CAA3C;AACH;;;yCAE2B;AACxB,gBAAME,YAAY,KAAlB;;AADwB,8CAAVC,QAAU;AAAVA,wBAAU;AAAA;;AAExB,gBAAMC,SAASD,SAASE,MAAT,CAAgB;AAAA,uBAAYH,UAAUI,IAAV,CAAeC,QAAf,CAAZ;AAAA,aAAhB,CAAf;;AAEA,gBAAIH,OAAOX,MAAP,KAAkB,CAAlB,IAAuBW,OAAOX,MAAP,GAAgB,CAA3C,EAA8C;AAC1C,uBAAO,IAAP;AACH;;AAED,iBAAKL,GAAL,OAAagB,OAAOI,IAAP,CAAY,GAAZ,CAAb;;AAEA,mBAAO,IAAP;AACH;;AAED;;;;oCAEY;AACR,mBAAO,KAAKpB,GAAL,CAAS,GAAT,CAAP;AACH;;;iCAEQJ,K,EAAOyB,K,EAAOC,K,EAAO;AAC1B;AACA1B,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;;AAEA,iBAAKI,GAAL,SAAeJ,KAAf;;AAEA,gBAAIyB,UAAUE,SAAV,IAAuBD,UAAUC,SAArC,EAAgD;AAC5C,qBAAKvB,GAAL,CAAS,GAAT,EAD4C,CAC7B;AAClB,aAFD,MAEO,IAAIqB,UAAUE,SAAV,IAAuBD,UAAUC,SAArC,EAAgD;AACnD,qBAAKvB,GAAL,OAAaqB,KAAb;AACH,aAFM,MAEA,IAAIA,UAAUE,SAAV,IAAuBD,UAAUC,SAArC,EAAgD;AACnD,qBAAKvB,GAAL,OAAaqB,KAAb,SAAsBC,KAAtB;AACH;;AAED,mBAAO,IAAP;AACH;;AAED;;;;uCAEe;AACX;AACA,iBAAK5B,SAAL,IAAkB,GAAlB;AACA,mBAAO,KAAKM,GAAL,CAAS,GAAT,CAAP;AACH;;;qCAEY;AACT;AACA,iBAAKN,SAAL,GAAiB,KAAKA,SAAL,CAAe8B,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAAjB;AACA,mBAAO,KAAKxB,GAAL,CAAS,GAAT,CAAP;AACH;;AAED;;;;gCAEQyB,M,EAAQ7B,K,EAAO;AACnB6B,qBAASA,OAAOC,QAAP,EAAT;AACA,mBAAOD,OAAOd,OAAP,CAAe,IAAf,EAAqBf,KAArB,CAAP;AACH;;;mCAEU;AACP,gBAAM+B,aAAa,KAAKD,QAAL,GAAgBE,KAAhB,CAAsB,qBAAtB,CAAnB;AACA,gBAAM/B,UAAU8B,WAAW,CAAX,CAAhB;AACA,gBAAME,QAAQF,WAAW,CAAX,CAAd;;AAEA,mBAAO,IAAIG,MAAJ,CAAWjC,OAAX,EAAoBgC,KAApB,CAAP;AACH;;;iCAhOejC,K,EAAO;AACnB,gBAAIA,MAAM6B,MAAV,EAAkB;AACd,uBAAO7B,MAAM6B,MAAb;AACH;;AAED,gBAAI,OAAO7B,KAAP,KAAiB,QAArB,EAA+B;AAC3B,uBAAOA,KAAP;AACH;;AAED;AACA;AACA,gBAAMmC,WAAW,yBAAjB;;AAEA;AACA,gBAAMC,YAAY,IAAlB;;AAEA;AACA,mBAAOpC,MAAMe,OAAN,CAAcoB,QAAd,SAA6BC,SAA7B,CAAP;AACH;;;;qBAhC0BF,M;;AAiP/B,SAASG,KAAT,GAAiB;AAAE;AACf,WAAO,IAAI1C,gBAAJ,EAAP;AACH","file":"verbalexpressions.js","sourcesContent":["/**\n * @file VerbalExpressions JavaScript Library\n * @version 0.3.0\n * @license MIT\n *\n * @see https://github.com/VerbalExpressions/JSVerbalExpressions\n */\n\nclass VerbalExpression extends RegExp {\n    constructor() {\n        // Call the `RegExp` constructor so that `this` can be used\n        super('', 'gm');\n\n        // Variables to hold the expression construction in order\n        this._prefixes = '';\n        this._source = '';\n        this._suffixes = '';\n        this._modifiers = 'gm'; // 'global, multiline' matching by default\n    }\n\n    // Utility //\n\n    static sanitize(value) {\n        if (value.source) {\n            return value.source;\n        }\n\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        // Regular expression to match meta characters\n        // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/regexp\n        const toEscape = /([\\].|*?+(){}^$\\\\:=[])/g;\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\n        const lastMatch = '$&';\n\n        // Escape meta characters\n        return value.replace(toEscape, `\\\\${lastMatch}`);\n    }\n\n    add(value = '') {\n        this._source += value;\n        const pattern = this._prefixes + this._source + this._suffixes;\n\n        this.compile(pattern, this._modifiers);\n\n        return this;\n    }\n\n    // Rules //\n\n    startOfLine(enable = true) {\n        this._prefixes = enable ? '^' : '';\n        return this.add();\n    }\n\n    endOfLine(enable = true) {\n        this._suffixes = enable ? '$' : '';\n        return this.add();\n    }\n\n    then(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:${value})`);\n    }\n\n    find(value) {\n        return this.then(value);\n    }\n\n    maybe(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:${value})?`);\n    }\n\n    or(value) {\n        this._prefixes += '(?:';\n        this._suffixes = `)${this._suffixes}`;\n\n        this.add(')|(?:');\n\n        if (value) {\n            this.then(value);\n        }\n\n        return this;\n    }\n\n    anything() {\n        return this.add('(?:.*)');\n    }\n\n    anythingBut(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:[^${value}]*)`);\n    }\n\n    something() {\n        return this.add('(?:.+)');\n    }\n\n    somethingBut(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:[^${value}]+)`);\n    }\n\n    anyOf(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`[${value}]`);\n    }\n\n    any(value) {\n        return this.anyOf(value);\n    }\n\n    range(...ranges) {\n        let value = '';\n\n        for (let i = 1; i < ranges.length; i += 2) {\n            const from = VerbalExpression.sanitize(ranges[i - 1]);\n            const to = VerbalExpression.sanitize(ranges[i]);\n\n            value += `${from}-${to}`;\n        }\n\n        return this.add(`[${value}]`);\n    }\n\n    // Special characters //\n\n    lineBreak() {\n        return this.add('(?:\\\\r\\\\n|\\\\r|\\\\n)'); // Unix(LF) + Windows(CRLF)\n    }\n\n    br() {\n        return this.lineBreak();\n    }\n\n    tab() {\n        return this.add('\\\\t');\n    }\n\n    word() {\n        return this.add('\\\\w+');\n    }\n\n    digit() {\n        return this.add('\\\\d');\n    }\n\n    whitespace() {\n        return this.add('\\\\s');\n    }\n\n    // Modifiers //\n\n    addModifier(modifier) {\n        if (!this._modifiers.includes(modifier)) {\n            this._modifiers += modifier;\n        }\n\n        return this.add();\n    }\n\n    removeModifier(modifier) {\n        this._modifiers = this._modifiers.replace(modifier, '');\n        return this.add();\n    }\n\n    withAnyCase(enable = true) {\n        return enable ? this.addModifier('i') : this.removeModifier('i');\n    }\n\n    stopAtFirst(enable = true) {\n        return enable ? this.removeModifier('g') : this.addModifier('g');\n    }\n\n    searchOneLine(enable = true) {\n        return enable ? this.removeModifier('m') : this.addModifier('m');\n    }\n\n    repeatPrevious(...quantity) {\n        const isInteger = /\\d+/;\n        const values = quantity.filter(argument => isInteger.test(argument));\n\n        if (values.length === 0 || values.length > 2) {\n            return this;\n        }\n\n        this.add(`{${values.join(',')}}`);\n\n        return this;\n    }\n\n    // Loops //\n\n    oneOrMore() {\n        return this.add('+');\n    }\n\n    multiple(value, lower, upper) {\n        // Use expression or string\n        value = VerbalExpression.sanitize(value);\n\n        this.add(`(?:${value})`);\n\n        if (lower === undefined && upper === undefined) {\n            this.add('*'); // Any number of times\n        } else if (lower !== undefined && upper === undefined) {\n            this.add(`{${lower},}`);\n        } else if (lower !== undefined && upper !== undefined) {\n            this.add(`{${lower},${upper}}`);\n        }\n\n        return this;\n    }\n\n    // Capture groups //\n\n    beginCapture() {\n        // Add the end of the capture group to the suffixes temporarily so that compilation continues to work\n        this._suffixes += ')';\n        return this.add('(');\n    }\n\n    endCapture() {\n        // Remove the last parenthesis from the _suffixes and add it to the regex\n        this._suffixes = this._suffixes.slice(0, -1);\n        return this.add(')');\n    }\n\n    // Miscellaneous //\n\n    replace(source, value) {\n        source = source.toString();\n        return source.replace(this, value);\n    }\n\n    toRegExp() {\n        const components = this.toString().match(/\\/(.*)\\/([gimuy]+)?/);\n        const pattern = components[1];\n        const flags = components[2];\n\n        return new RegExp(pattern, flags);\n    }\n}\n\nfunction VerEx() { // eslint-disable-line no-unused-vars\n    return new VerbalExpression();\n}\n"]}