{"version":3,"sources":["../VerbalExpressions.js"],"names":["VerbalExpression","_prefixes","_source","_suffixes","_modifiers","value","pattern","compile","enable","add","sanitize","then","Array","isArray","join","anyOf","i","length","from","to","lineBreak","modifier","includes","replace","addModifier","removeModifier","isInteger","quantity","values","filter","argument","test","lower","upper","undefined","slice","source","toString","components","match","flags","RegExp","toEscape","lastMatch","VerEx","instance"],"mappings":"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","sourcesContent":["/**\n * @file VerbalExpressions JavaScript Library\n * @version 0.3.0\n * @license MIT\n *\n * @see https://github.com/VerbalExpressions/JSVerbalExpressions\n */\n\n/**\n * Define the VerbalExpression class\n *\n * @class VerbalExpression\n * @extends {RegExp}\n */\nclass VerbalExpression extends RegExp {\n    /**\n     * Creates an instance of VerbalExpression.\n     * @constructor\n     * @alias VerEx\n     * @memberof VerbalExpression\n     */\n    constructor() {\n        // Call the `RegExp` constructor so that `this` can be used\n        super('', 'gm');\n\n        // Variables to hold the expression construction in order\n        this._prefixes = '';\n        this._source = '';\n        this._suffixes = '';\n        this._modifiers = 'gm'; // 'global, multiline' matching by default\n    }\n\n    // Utility //\n\n    /**\n     * Escape meta-characters in the parameter and make it safe for adding to the expression\n     * @static\n     * @param {(string|RegExp|number)} value object to sanitize\n     * @returns {string} sanitized value\n     * @memberof VerbalExpression\n     */\n    static sanitize(value) {\n        if (value instanceof RegExp) {\n            return value.source;\n        }\n\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        if (typeof value !== 'string') {\n            return '';\n        }\n\n        // Regular expression to match meta characters\n        // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/regexp\n        const toEscape = /[|\\\\{}()[\\]^$+*?.]/g;\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\n        const lastMatch = '$&';\n\n        // Escape meta characters\n        return value\n            .replace(toEscape, `\\\\${lastMatch}`)\n            .replace(/-/g, '\\\\x2d');\n    }\n\n    /**\n     * Add stuff to the expression and compile the new expression so it's ready to be used.\n     * @param {(string|number)} [value=''] stuff to add\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    add(value = '') {\n        this._source += value;\n        const pattern = this._prefixes + this._source + this._suffixes;\n\n        this.compile(pattern, this._modifiers);\n\n        return this;\n    }\n\n    // Rules //\n\n    /**\n     * Control start-of-line matching\n     * @param {boolean} [enable=true] whether to enable this behaviour\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    startOfLine(enable = true) {\n        this._prefixes = enable ? '^' : '';\n        return this.add();\n    }\n\n    /**\n     * Control end-of-line matching\n     * @param {boolean} [enable=true] whether to enable this behaviour\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    endOfLine(enable = true) {\n        this._suffixes = enable ? '$' : '';\n        return this.add();\n    }\n\n    /**\n     * Look for the value passed\n     * @param {(string|RegExp|number)} value value to find\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    then(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:${value})`);\n    }\n\n    /**\n     * Alias for then() to allow for readable syntax when then() is the first method in the chain.\n     * @param {(string|RegExp|numer)} value value to find\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    find(value) {\n        return this.then(value);\n    }\n\n    /**\n     * Add optional values\n     * @param {(string|RegExp|number)} value value to find\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    maybe(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:${value})?`);\n    }\n\n    /**\n     * Add alternative expressions\n     * @param {(string|RegExp|number)} value value to find\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    or(value) {\n        this._prefixes += '(?:';\n        this._suffixes = `)${this._suffixes}`;\n\n        this.add(')|(?:');\n\n        if (value) {\n            this.then(value);\n        }\n\n        return this;\n    }\n\n    /**\n     * Any character any number of times\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    anything() {\n        return this.add('(?:.*)');\n    }\n\n    /**\n     * Anything but these characters\n     * @param {(string|number|string[]|number[])} value characters to not match\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    anythingBut(value) {\n        if (Array.isArray(value)) {\n            value = value.join('');\n        }\n\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:[^${value}]*)`);\n    }\n\n    /**\n     * Any character(s) at least once\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    something() {\n        return this.add('(?:.+)');\n    }\n\n    /**\n     * Any character at least one time except for these characters\n     * @param {(string|number|string[]|number[])} value characters to not match\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    somethingBut(value) {\n        if (Array.isArray(value)) {\n            value = value.join('');\n        }\n\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:[^${value}]+)`);\n    }\n\n    /**\n     * Match any of the given characters\n     * @param {(string|number|string[]|number[])} value characters to match\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    anyOf(value) {\n        if (Array.isArray(value)) {\n            value = value.join('');\n        }\n\n        value = VerbalExpression.sanitize(value);\n        return this.add(`[${value}]`);\n    }\n\n    /**\n     * Shorthand for anyOf(value)\n     * @param {string|number} value value to find\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    any(value) {\n        return this.anyOf(value);\n    }\n\n    /**\n     * Ensure that the parameter does not follow\n     * @param {string|number} value\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    not(value) {\n        value = VerbalExpression.sanitize(value);\n        this.add(`(?!${value})`);\n\n        return this;\n    }\n\n    /**\n     * Matching any character within a range of characters\n     * Usage: .range( from, to [, from, to ... ] )\n     * @param {...string} ranges characters denoting beginning and ending of ranges\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    range(...ranges) {\n        let value = '';\n\n        for (let i = 1; i < ranges.length; i += 2) {\n            const from = VerbalExpression.sanitize(ranges[i - 1]);\n            const to = VerbalExpression.sanitize(ranges[i]);\n\n            value += `${from}-${to}`;\n        }\n\n        return this.add(`[${value}]`);\n    }\n\n    // Special characters //\n\n    /**\n     * Match a Line break\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    lineBreak() {\n        return this.add('(?:\\\\r\\\\n|\\\\r|\\\\n)'); // Unix(LF) + Windows(CRLF)\n    }\n\n    /**\n     * A shorthand for lineBreak() for html-minded users\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    br() {\n        return this.lineBreak();\n    }\n\n    /**\n     * Match a tab character\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    tab() {\n        return this.add('\\\\t');\n    }\n\n    /**\n     * Match any alphanumeric\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    word() {\n        return this.add('\\\\w+');\n    }\n\n    /**\n     * Match a single digit\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    digit() {\n        return this.add('\\\\d');\n    }\n\n    /**\n     * Match a single whitespace\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    whitespace() {\n        return this.add('\\\\s');\n    }\n\n    // Modifiers //\n\n    /**\n     * Add a regex modifier/flag\n     * @param {string} modifier modifier to add\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    addModifier(modifier) {\n        if (!this._modifiers.includes(modifier)) {\n            this._modifiers += modifier;\n        }\n\n        return this.add();\n    }\n\n    /**\n     * Remove modifier\n     * @param {string} modifier modifier to remove\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    removeModifier(modifier) {\n        this._modifiers = this._modifiers.replace(modifier, '');\n        return this.add();\n    }\n\n    /**\n     * Control case-insensitive matching\n     * @param {boolean} [enable=true] whether to enable this behaviour\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    withAnyCase(enable = true) {\n        return enable ? this.addModifier('i') : this.removeModifier('i');\n    }\n\n    /**\n     * Default behaviour is with \"g\" modifier, so we can turn this another way around than other modifiers\n     * @param {boolean} [enable=true] whether to enable this behaviour\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    stopAtFirst(enable = true) {\n        return enable ? this.removeModifier('g') : this.addModifier('g');\n    }\n\n    /**\n     * Control the multiline modifier\n     * @param {boolean} [enable=true] whether to enable this behaviour\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    searchOneLine(enable = true) {\n        return enable ? this.removeModifier('m') : this.addModifier('m');\n    }\n\n    // Loops //\n\n    /**\n     * Repeat the previous item exactly n times or between n and m times\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    repeatPrevious(...quantity) {\n        const isInteger = /\\d+/;\n        const values = quantity.filter((argument) => isInteger.test(argument));\n\n        if (values.length === 0 || values.length > 2) {\n            return this;\n        }\n\n        this.add(`{${values.join(',')}}`);\n\n        return this;\n    }\n\n    /**\n     * Repeat the previous at least once\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    oneOrMore() {\n        return this.add('+');\n    }\n\n    /**\n     * Match the value zero or more times\n     * @param {string} value value to find\n     * @param {integer} [lower] minimum number of times the value should be repeated\n     * @param {integer} [upper] maximum number of times the value should be repeated\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    multiple(value, lower, upper) {\n        if (value !== undefined) {\n            value = VerbalExpression.sanitize(value);\n            this.add(`(?:${value})`);\n        }\n\n        if (lower === undefined && upper === undefined) {\n            this.add('*'); // Any number of times\n        } else if (lower !== undefined && upper === undefined) {\n            this.add(`{${lower},}`);\n        } else if (lower !== undefined && upper !== undefined) {\n            this.add(`{${lower},${upper}}`);\n        }\n\n        return this;\n    }\n\n    // Capture groups //\n\n    /**\n     * Starts a capturing group\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    beginCapture() {\n        // Add the end of the capture group to the suffixes temporarily so that compilation continues to work\n        this._suffixes += ')';\n        return this.add('(');\n    }\n\n    /**\n     * Ends a capturing group\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    endCapture() {\n        // Remove the last parenthesis from the _suffixes and add it to the regex\n        this._suffixes = this._suffixes.slice(0, -1);\n        return this.add(')');\n    }\n\n    // Miscellaneous //\n\n    /**\n     * Shorthand function for the string.replace function to allow for a more logical flow\n     * @param {string} source string to search for\n     * @param {string} value value to replace with\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    replace(source, value) {\n        source = source.toString();\n        return source.replace(this, value);\n    }\n\n    /**\n     * Convert to RegExp object\n     * @returns {RegExp} equivalent RegExp instance\n     * @memberof VerbalExpression\n     */\n    toRegExp() {\n        const components = this.toString().match(/\\/(.*)\\/([gimuy]+)?/);\n        const pattern = components[1];\n        const flags = components[2];\n\n        return new RegExp(pattern, flags);\n    }\n}\n\n/**\n * Return a new instance of `VerbalExpression`\n * @export\n * @returns {VerbalExpression} new instance\n */\nfunction VerEx() { // eslint-disable-line no-unused-vars\n    const instance = new VerbalExpression();\n    instance.sanitize = VerbalExpression.sanitize;\n    return instance;\n}\n"],"file":"verbalexpressions.js"}