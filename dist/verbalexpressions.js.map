{"version":3,"sources":["../VerbalExpressions.js"],"names":["VerbalExpression","_prefixes","_source","_suffixes","_modifiers","value","pattern","compile","enable","add","sanitize","then","Array","isArray","join","anyOf","i","length","from","to","lineBreak","modifier","includes","replace","addModifier","removeModifier","isInteger","quantity","values","filter","test","argument","lower","upper","undefined","slice","source","toString","components","match","flags","RegExp","toEscape","lastMatch","VerEx","instance"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAQA;;;;;;IAMMA,gB;;;AACF;;;;;;AAMA,gCAAc;AAAA;;AAIV;AAJU,wIAEJ,EAFI,EAEA,IAFA;AACV;;;AAIA,cAAKC,SAAL,GAAiB,EAAjB;AACA,cAAKC,OAAL,GAAe,EAAf;AACA,cAAKC,SAAL,GAAiB,EAAjB;AACA,cAAKC,UAAL,GAAkB,IAAlB,CARU,CAQc;AARd;AASb;;AAED;;AAEA;;;;;;;;;;;;;AA+BA;;;;;;8BAMgB;AAAA,gBAAZC,KAAY,uEAAJ,EAAI;;AACZ,iBAAKH,OAAL,IAAgBG,KAAhB;AACA,gBAAMC,UAAU,KAAKL,SAAL,GAAiB,KAAKC,OAAtB,GAAgC,KAAKC,SAArD;;AAEA,iBAAKI,OAAL,CAAaD,OAAb,EAAsB,KAAKF,UAA3B;;AAEA,mBAAO,IAAP;AACH;;AAED;;AAEA;;;;;;;;;sCAM2B;AAAA,gBAAfI,MAAe,uEAAN,IAAM;;AACvB,iBAAKP,SAAL,GAAiBO,SAAS,GAAT,GAAe,EAAhC;AACA,mBAAO,KAAKC,GAAL,EAAP;AACH;;AAED;;;;;;;;;oCAMyB;AAAA,gBAAfD,MAAe,uEAAN,IAAM;;AACrB,iBAAKL,SAAL,GAAiBK,SAAS,GAAT,GAAe,EAAhC;AACA,mBAAO,KAAKC,GAAL,EAAP;AACH;;AAED;;;;;;;;;6BAMKJ,K,EAAO;AACRA,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,mBAAO,KAAKI,GAAL,SAAeJ,KAAf,OAAP;AACH;;AAED;;;;;;;;;6BAMKA,K,EAAO;AACR,mBAAO,KAAKM,IAAL,CAAUN,KAAV,CAAP;AACH;;AAED;;;;;;;;;8BAMMA,K,EAAO;AACTA,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,mBAAO,KAAKI,GAAL,SAAeJ,KAAf,QAAP;AACH;;AAED;;;;;;;;;2BAMGA,K,EAAO;AACN,iBAAKJ,SAAL,IAAkB,KAAlB;AACA,iBAAKE,SAAL,SAAqB,KAAKA,SAA1B;;AAEA,iBAAKM,GAAL,CAAS,OAAT;;AAEA,gBAAIJ,KAAJ,EAAW;AACP,qBAAKM,IAAL,CAAUN,KAAV;AACH;;AAED,mBAAO,IAAP;AACH;;AAED;;;;;;;;mCAKW;AACP,mBAAO,KAAKI,GAAL,CAAS,QAAT,CAAP;AACH;;AAED;;;;;;;;;oCAMYJ,K,EAAO;AACf,gBAAIO,MAAMC,OAAN,CAAcR,KAAd,CAAJ,EAA0B;AACtBA,wBAAQA,MAAMS,IAAN,CAAW,EAAX,CAAR;AACH;;AAEDT,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,mBAAO,KAAKI,GAAL,WAAiBJ,KAAjB,SAAP;AACH;;AAED;;;;;;;;oCAKY;AACR,mBAAO,KAAKI,GAAL,CAAS,QAAT,CAAP;AACH;;AAED;;;;;;;;;qCAMaJ,K,EAAO;AAChB,gBAAIO,MAAMC,OAAN,CAAcR,KAAd,CAAJ,EAA0B;AACtBA,wBAAQA,MAAMS,IAAN,CAAW,EAAX,CAAR;AACH;;AAEDT,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,mBAAO,KAAKI,GAAL,WAAiBJ,KAAjB,SAAP;AACH;;AAED;;;;;;;;;8BAMMA,K,EAAO;AACT,gBAAIO,MAAMC,OAAN,CAAcR,KAAd,CAAJ,EAA0B;AACtBA,wBAAQA,MAAMS,IAAN,CAAW,EAAX,CAAR;AACH;;AAEDT,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,mBAAO,KAAKI,GAAL,OAAaJ,KAAb,OAAP;AACH;;AAED;;;;;;;;;4BAMIA,K,EAAO;AACP,mBAAO,KAAKU,KAAL,CAAWV,KAAX,CAAP;AACH;;AAED;;;;;;;;;4BAMIA,K,EAAO;AACPA,oBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,iBAAKI,GAAL,SAAeJ,KAAf;;AAEA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;gCAOiB;AACb,gBAAIA,QAAQ,EAAZ;;AAEA,iBAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAI,UAAOC,MAA3B,EAAmCD,KAAK,CAAxC,EAA2C;AACvC,oBAAME,OAAOlB,iBAAiBU,QAAjB,qBAAiCM,IAAI,CAArC,yBAAiCA,IAAI,CAArC,EAAb;AACA,oBAAMG,KAAKnB,iBAAiBU,QAAjB,qBAAiCM,CAAjC,yBAAiCA,CAAjC,EAAX;;AAEAX,yBAAYa,IAAZ,SAAoBC,EAApB;AACH;;AAED,mBAAO,KAAKV,GAAL,OAAaJ,KAAb,OAAP;AACH;;AAED;;AAEA;;;;;;;;oCAKY;AACR,mBAAO,KAAKI,GAAL,CAAS,oBAAT,CAAP,CADQ,CAC+B;AAC1C;;AAED;;;;;;;;6BAKK;AACD,mBAAO,KAAKW,SAAL,EAAP;AACH;;AAED;;;;;;;;8BAKM;AACF,mBAAO,KAAKX,GAAL,CAAS,KAAT,CAAP;AACH;;AAED;;;;;;;;+BAKO;AACH,mBAAO,KAAKA,GAAL,CAAS,MAAT,CAAP;AACH;;AAED;;;;;;;;gCAKQ;AACJ,mBAAO,KAAKA,GAAL,CAAS,KAAT,CAAP;AACH;;AAED;;;;;;;;qCAKa;AACT,mBAAO,KAAKA,GAAL,CAAS,KAAT,CAAP;AACH;;AAED;;AAEA;;;;;;;;;oCAMYY,Q,EAAU;AAClB,gBAAI,CAAC,KAAKjB,UAAL,CAAgBkB,QAAhB,CAAyBD,QAAzB,CAAL,EAAyC;AACrC,qBAAKjB,UAAL,IAAmBiB,QAAnB;AACH;;AAED,mBAAO,KAAKZ,GAAL,EAAP;AACH;;AAED;;;;;;;;;uCAMeY,Q,EAAU;AACrB,iBAAKjB,UAAL,GAAkB,KAAKA,UAAL,CAAgBmB,OAAhB,CAAwBF,QAAxB,EAAkC,EAAlC,CAAlB;AACA,mBAAO,KAAKZ,GAAL,EAAP;AACH;;AAED;;;;;;;;;sCAM2B;AAAA,gBAAfD,MAAe,uEAAN,IAAM;;AACvB,mBAAOA,SAAS,KAAKgB,WAAL,CAAiB,GAAjB,CAAT,GAAiC,KAAKC,cAAL,CAAoB,GAApB,CAAxC;AACH;;AAED;;;;;;;;;sCAM2B;AAAA,gBAAfjB,MAAe,uEAAN,IAAM;;AACvB,mBAAOA,SAAS,KAAKiB,cAAL,CAAoB,GAApB,CAAT,GAAoC,KAAKD,WAAL,CAAiB,GAAjB,CAA3C;AACH;;AAED;;;;;;;;;wCAM6B;AAAA,gBAAfhB,MAAe,uEAAN,IAAM;;AACzB,mBAAOA,SAAS,KAAKiB,cAAL,CAAoB,GAApB,CAAT,GAAoC,KAAKD,WAAL,CAAiB,GAAjB,CAA3C;AACH;;AAED;;AAEA;;;;;;;;yCAK4B;AACxB,gBAAME,YAAY,KAAlB;;AADwB,8CAAVC,QAAU;AAAVA,wBAAU;AAAA;;AAExB,gBAAMC,SAASD,SAASE,MAAT,CAAgB;AAAA,uBAAYH,UAAUI,IAAV,CAAeC,QAAf,CAAZ;AAAA,aAAhB,CAAf;;AAEA,gBAAIH,OAAOX,MAAP,KAAkB,CAAlB,IAAuBW,OAAOX,MAAP,GAAgB,CAA3C,EAA8C;AAC1C,uBAAO,IAAP;AACH;;AAED,iBAAKR,GAAL,OAAamB,OAAOd,IAAP,CAAY,GAAZ,CAAb;;AAEA,mBAAO,IAAP;AACH;;AAED;;;;;;;;oCAKY;AACR,mBAAO,KAAKL,GAAL,CAAS,GAAT,CAAP;AACH;;AAED;;;;;;;;;;;iCAQSJ,K,EAAO2B,K,EAAOC,K,EAAO;AAC1B,gBAAI5B,UAAU6B,SAAd,EAAyB;AACrB7B,wBAAQL,iBAAiBU,QAAjB,CAA0BL,KAA1B,CAAR;AACA,qBAAKI,GAAL,SAAeJ,KAAf;AACH;;AAED,gBAAI2B,UAAUE,SAAV,IAAuBD,UAAUC,SAArC,EAAgD;AAC5C,qBAAKzB,GAAL,CAAS,GAAT,EAD4C,CAC7B;AAClB,aAFD,MAEO,IAAIuB,UAAUE,SAAV,IAAuBD,UAAUC,SAArC,EAAgD;AACnD,qBAAKzB,GAAL,OAAauB,KAAb;AACH,aAFM,MAEA,IAAIA,UAAUE,SAAV,IAAuBD,UAAUC,SAArC,EAAgD;AACnD,qBAAKzB,GAAL,OAAauB,KAAb,SAAsBC,KAAtB;AACH;;AAED,mBAAO,IAAP;AACH;;AAED;;AAEA;;;;;;;;uCAKe;AACX;AACA,iBAAK9B,SAAL,IAAkB,GAAlB;AACA,mBAAO,KAAKM,GAAL,CAAS,GAAT,CAAP;AACH;;AAED;;;;;;;;qCAKa;AACT;AACA,iBAAKN,SAAL,GAAiB,KAAKA,SAAL,CAAegC,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAAjB;AACA,mBAAO,KAAK1B,GAAL,CAAS,GAAT,CAAP;AACH;;AAED;;AAEA;;;;;;;;;;gCAOQ2B,M,EAAQ/B,K,EAAO;AACnB+B,qBAASA,OAAOC,QAAP,EAAT;AACA,mBAAOD,OAAOb,OAAP,CAAe,IAAf,EAAqBlB,KAArB,CAAP;AACH;;AAED;;;;;;;;mCAKW;AACP,gBAAMiC,aAAa,KAAKD,QAAL,GAAgBE,KAAhB,CAAsB,qBAAtB,CAAnB;AACA,gBAAMjC,UAAUgC,WAAW,CAAX,CAAhB;AACA,gBAAME,QAAQF,WAAW,CAAX,CAAd;;AAEA,mBAAO,IAAIG,MAAJ,CAAWnC,OAAX,EAAoBkC,KAApB,CAAP;AACH;;;iCApbenC,K,EAAO;AACnB,gBAAIA,iBAAiBoC,MAArB,EAA6B;AACzB,uBAAOpC,MAAM+B,MAAb;AACH;;AAED,gBAAI,OAAO/B,KAAP,KAAiB,QAArB,EAA+B;AAC3B,uBAAOA,KAAP;AACH;;AAED,gBAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,uBAAO,EAAP;AACH;;AAED;AACA;AACA,gBAAMqC,WAAW,yBAAjB;;AAEA;AACA,gBAAMC,YAAY,IAAlB;;AAEA;AACA,mBAAOtC,MAAMkB,OAAN,CAAcmB,QAAd,SAA6BC,SAA7B,CAAP;AACH;;;;qBAjD0BF,M;;AAkd/B;;;;;;;AAKA,SAASG,KAAT,GAAiB;AAAE;AACf,QAAMC,WAAW,IAAI7C,gBAAJ,EAAjB;AACA6C,aAASnC,QAAT,GAAoBV,iBAAiBU,QAArC;AACA,WAAOmC,QAAP;AACH","file":"verbalexpressions.js","sourcesContent":["/**\n * @file VerbalExpressions JavaScript Library\n * @version 0.3.0\n * @license MIT\n *\n * @see https://github.com/VerbalExpressions/JSVerbalExpressions\n */\n\n/**\n * Define the VerbalExpression class\n *\n * @class VerbalExpression\n * @extends {RegExp}\n */\nclass VerbalExpression extends RegExp {\n    /**\n     * Creates an instance of VerbalExpression.\n     * @constructor\n     * @alias VerEx\n     * @memberof VerbalExpression\n     */\n    constructor() {\n        // Call the `RegExp` constructor so that `this` can be used\n        super('', 'gm');\n\n        // Variables to hold the expression construction in order\n        this._prefixes = '';\n        this._source = '';\n        this._suffixes = '';\n        this._modifiers = 'gm'; // 'global, multiline' matching by default\n    }\n\n    // Utility //\n\n    /**\n     * Escape meta-characters in the parameter and make it safe for adding to the expression\n     * @static\n     * @param {(string|RegExp|number)} value object to sanitize\n     * @returns {string} sanitized value\n     * @memberof VerbalExpression\n     */\n    static sanitize(value) {\n        if (value instanceof RegExp) {\n            return value.source;\n        }\n\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        if (typeof value !== 'string') {\n            return '';\n        }\n\n        // Regular expression to match meta characters\n        // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/regexp\n        const toEscape = /([\\].|*?+(){}^$\\\\:=[])/g;\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\n        const lastMatch = '$&';\n\n        // Escape meta characters\n        return value.replace(toEscape, `\\\\${lastMatch}`);\n    }\n\n    /**\n     * Add stuff to the expression and compile the new expression so it's ready to be used.\n     * @param {(string|number)} [value=''] stuff to add\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    add(value = '') {\n        this._source += value;\n        const pattern = this._prefixes + this._source + this._suffixes;\n\n        this.compile(pattern, this._modifiers);\n\n        return this;\n    }\n\n    // Rules //\n\n    /**\n     * Control start-of-line matching\n     * @param {boolean} [enable=true] whether to enable this behaviour\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    startOfLine(enable = true) {\n        this._prefixes = enable ? '^' : '';\n        return this.add();\n    }\n\n    /**\n     * Control end-of-line matching\n     * @param {boolean} [enable=true] whether to enable this behaviour\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    endOfLine(enable = true) {\n        this._suffixes = enable ? '$' : '';\n        return this.add();\n    }\n\n    /**\n     * Look for the value passed\n     * @param {(string|RegExp|number)} value value to find\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    then(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:${value})`);\n    }\n\n    /**\n     * Alias for then() to allow for readable syntax when then() is the first method in the chain.\n     * @param {(string|RegExp|numer)} value value to find\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    find(value) {\n        return this.then(value);\n    }\n\n    /**\n     * Add optional values\n     * @param {(string|RegExp|number)} value value to find\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    maybe(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:${value})?`);\n    }\n\n    /**\n     * Add alternative expressions\n     * @param {(string|RegExp|number)} value value to find\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    or(value) {\n        this._prefixes += '(?:';\n        this._suffixes = `)${this._suffixes}`;\n\n        this.add(')|(?:');\n\n        if (value) {\n            this.then(value);\n        }\n\n        return this;\n    }\n\n    /**\n     * Any character any number of times\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    anything() {\n        return this.add('(?:.*)');\n    }\n\n    /**\n     * Anything but these characters\n     * @param {(string|number|string[]|number[])} value characters to not match\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    anythingBut(value) {\n        if (Array.isArray(value)) {\n            value = value.join('');\n        }\n\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:[^${value}]*)`);\n    }\n\n    /**\n     * Any character(s) at least once\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    something() {\n        return this.add('(?:.+)');\n    }\n\n    /**\n     * Any character at least one time except for these characters\n     * @param {(string|number|string[]|number[])} value characters to not match\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    somethingBut(value) {\n        if (Array.isArray(value)) {\n            value = value.join('');\n        }\n\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:[^${value}]+)`);\n    }\n\n    /**\n     * Match any of the given characters\n     * @param {(string|number|string[]|number[])} value characters to match\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    anyOf(value) {\n        if (Array.isArray(value)) {\n            value = value.join('');\n        }\n\n        value = VerbalExpression.sanitize(value);\n        return this.add(`[${value}]`);\n    }\n\n    /**\n     * Shorthand for anyOf(value)\n     * @param {string|number} value value to find\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    any(value) {\n        return this.anyOf(value);\n    }\n\n    /**\n     * Ensure that the parameter does not follow\n     * @param {string|number} value\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    not(value) {\n        value = VerbalExpression.sanitize(value);\n        this.add(`(?!${value})`);\n\n        return this;\n    }\n\n    /**\n     * Matching any character within a range of characters\n     * Usage: .range( from, to [, from, to ... ] )\n     * @param {...string} ranges characters denoting beginning and ending of ranges\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    range(...ranges) {\n        let value = '';\n\n        for (let i = 1; i < ranges.length; i += 2) {\n            const from = VerbalExpression.sanitize(ranges[i - 1]);\n            const to = VerbalExpression.sanitize(ranges[i]);\n\n            value += `${from}-${to}`;\n        }\n\n        return this.add(`[${value}]`);\n    }\n\n    // Special characters //\n\n    /**\n     * Match a Line break\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    lineBreak() {\n        return this.add('(?:\\\\r\\\\n|\\\\r|\\\\n)'); // Unix(LF) + Windows(CRLF)\n    }\n\n    /**\n     * A shorthand for lineBreak() for html-minded users\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    br() {\n        return this.lineBreak();\n    }\n\n    /**\n     * Match a tab character\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    tab() {\n        return this.add('\\\\t');\n    }\n\n    /**\n     * Match any alphanumeric\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    word() {\n        return this.add('\\\\w+');\n    }\n\n    /**\n     * Match a single digit\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    digit() {\n        return this.add('\\\\d');\n    }\n\n    /**\n     * Match a single whitespace\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    whitespace() {\n        return this.add('\\\\s');\n    }\n\n    // Modifiers //\n\n    /**\n     * Add a regex modifier/flag\n     * @param {string} modifier modifier to add\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    addModifier(modifier) {\n        if (!this._modifiers.includes(modifier)) {\n            this._modifiers += modifier;\n        }\n\n        return this.add();\n    }\n\n    /**\n     * Remove modifier\n     * @param {string} modifier modifier to remove\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    removeModifier(modifier) {\n        this._modifiers = this._modifiers.replace(modifier, '');\n        return this.add();\n    }\n\n    /**\n     * Control case-insensitive matching\n     * @param {boolean} [enable=true] whether to enable this behaviour\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    withAnyCase(enable = true) {\n        return enable ? this.addModifier('i') : this.removeModifier('i');\n    }\n\n    /**\n     * Default behaviour is with \"g\" modifier, so we can turn this another way around than other modifiers\n     * @param {boolean} [enable=true] whether to enable this behaviour\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    stopAtFirst(enable = true) {\n        return enable ? this.removeModifier('g') : this.addModifier('g');\n    }\n\n    /**\n     * Control the multiline modifier\n     * @param {boolean} [enable=true] whether to enable this behaviour\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    searchOneLine(enable = true) {\n        return enable ? this.removeModifier('m') : this.addModifier('m');\n    }\n\n    // Loops //\n\n    /**\n     * Repeat the previous item exactly n times or between n and m times\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    repeatPrevious(...quantity) {\n        const isInteger = /\\d+/;\n        const values = quantity.filter(argument => isInteger.test(argument));\n\n        if (values.length === 0 || values.length > 2) {\n            return this;\n        }\n\n        this.add(`{${values.join(',')}}`);\n\n        return this;\n    }\n\n    /**\n     * Repeat the previous at least once\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    oneOrMore() {\n        return this.add('+');\n    }\n\n    /**\n     * Match the value zero or more times\n     * @param {string} value value to find\n     * @param {integer} [lower] minimum number of times the value should be repeated\n     * @param {integer} [upper] maximum number of times the value should be repeated\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    multiple(value, lower, upper) {\n        if (value !== undefined) {\n            value = VerbalExpression.sanitize(value);\n            this.add(`(?:${value})`);\n        }\n\n        if (lower === undefined && upper === undefined) {\n            this.add('*'); // Any number of times\n        } else if (lower !== undefined && upper === undefined) {\n            this.add(`{${lower},}`);\n        } else if (lower !== undefined && upper !== undefined) {\n            this.add(`{${lower},${upper}}`);\n        }\n\n        return this;\n    }\n\n    // Capture groups //\n\n    /**\n     * Starts a capturing group\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    beginCapture() {\n        // Add the end of the capture group to the suffixes temporarily so that compilation continues to work\n        this._suffixes += ')';\n        return this.add('(');\n    }\n\n    /**\n     * Ends a capturing group\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    endCapture() {\n        // Remove the last parenthesis from the _suffixes and add it to the regex\n        this._suffixes = this._suffixes.slice(0, -1);\n        return this.add(')');\n    }\n\n    // Miscellaneous //\n\n    /**\n     * Shorthand function for the string.replace function to allow for a more logical flow\n     * @param {string} source string to search for\n     * @param {string} value value to replace with\n     * @returns {VerbalExpression} recompiled instance of VerbalExpression\n     * @memberof VerbalExpression\n     */\n    replace(source, value) {\n        source = source.toString();\n        return source.replace(this, value);\n    }\n\n    /**\n     * Convert to RegExp object\n     * @returns {RegExp} equivalent RegExp instance\n     * @memberof VerbalExpression\n     */\n    toRegExp() {\n        const components = this.toString().match(/\\/(.*)\\/([gimuy]+)?/);\n        const pattern = components[1];\n        const flags = components[2];\n\n        return new RegExp(pattern, flags);\n    }\n}\n\n/**\n * Return a new instance of `VerbalExpression`\n * @export\n * @returns {VerbalExpression} new instance\n */\nfunction VerEx() { // eslint-disable-line no-unused-vars\n    const instance = new VerbalExpression();\n    instance.sanitize = VerbalExpression.sanitize;\n    return instance;\n}\n"]}